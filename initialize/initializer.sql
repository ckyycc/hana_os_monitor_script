--CREATE TABLE
DROP TABLE "HANA_OS_MONITOR"."M_VERSION_INFO";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."M_VERSION_INFO" ("CHECK_ID" VARCHAR(20) NOT NULL,
	 "SID" VARCHAR(25) NOT NULL,
	 "INSTANCE_NUM" VARCHAR(25),
	 "SERVER_ID" INTEGER CS_INT NOT NULL ,
	 "REVISION" VARCHAR(50) NOT NULL,
	 "RELEASE_SP" VARCHAR(50) NOT NULL,
	 "CHECK_TIME" TIMESTAMP DEFAULT CURRENT_TIMESTAMP ,
	 PRIMARY KEY INVERTED VALUE ("CHECK_ID", "SID", "SERVER_ID")) UNLOAD PRIORITY 5 AUTO MERGE;

DROP TABLE "HANA_OS_MONITOR"."MONITOR_CONFIGURATION";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."MONITOR_CONFIGURATION" (
     "COMPONENT" VARCHAR(25) NOT NULL,
	 "CONFIGURATION" VARCHAR(100) NOT NULL,
	 "VALUE" VARCHAR(100) NOT NULL,
	 PRIMARY KEY INVERTED VALUE ("COMPONENT", "CONFIGURATION")) UNLOAD PRIORITY 5 AUTO MERGE ;

DROP TABLE "HANA_OS_MONITOR"."M_CPU_INFO";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."M_CPU_INFO" ("CHECK_ID" VARCHAR(20) NOT NULL,
	 "USER_NAME" VARCHAR(25) NOT NULL,
	 "SERVER_ID" INTEGER CS_INT NOT NULL ,
	 "PROCESS_ID" INTEGER CS_INT NOT NULL ,
	 "PROCESS_COMMAND" VARCHAR(100) NOT NULL,
	 "CPU" DECIMAL CS_DECIMAL_FLOAT,
	 "CHECK_TIME" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	 PRIMARY KEY INVERTED VALUE ("CHECK_ID", "USER_NAME",
	 "SERVER_ID",
	 "PROCESS_ID")) UNLOAD PRIORITY 5 AUTO MERGE;

DROP TABLE "HANA_OS_MONITOR"."M_MEM_INFO";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."M_MEM_INFO" ("CHECK_ID" VARCHAR(20) NOT NULL,
	 "USER_NAME" VARCHAR(25) NOT NULL,
	 "SERVER_ID" INTEGER CS_INT NOT NULL ,
	 "PROCESS_ID" INTEGER CS_INT NOT NULL ,
	 "PROCESS_COMMAND" VARCHAR(100) NOT NULL,
	 "MEM" DECIMAL CS_DECIMAL_FLOAT,
	 "CHECK_TIME" TIMESTAMP DEFAULT CURRENT_TIMESTAMP ,
	 PRIMARY KEY INVERTED VALUE ("CHECK_ID", "USER_NAME",
	 "SERVER_ID",
	 "PROCESS_ID")) UNLOAD PRIORITY 5 AUTO MERGE;

DROP TABLE "HANA_OS_MONITOR"."M_DISK_INFO";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."M_DISK_INFO" ("CHECK_ID" VARCHAR(20) NOT NULL,
	 "SERVER_ID" INTEGER CS_INT NOT NULL ,
	 "FOLDER" VARCHAR(50) NOT NULL ,
	 "USER_NAME" VARCHAR(25),
	 "DISK_USAGE_KB" DECIMAL CS_DECIMAL_FLOAT,
	 "CHECK_TIME" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	 PRIMARY KEY INVERTED VALUE ("CHECK_ID", "SERVER_ID",
	 "FOLDER")) UNLOAD PRIORITY 5 AUTO MERGE ;

DROP TABLE "HANA_OS_MONITOR"."M_SERVER_INFO";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."M_SERVER_INFO" ("CHECK_ID" VARCHAR(20) NOT NULL,
	 "SERVER_ID" INTEGER CS_INT NOT NULL ,
	 "DISK_TOTAL" DECIMAL CS_DECIMAL_FLOAT,
	 "DISK_FREE" DECIMAL CS_DECIMAL_FLOAT,
	 "MEM_TOTAL" DECIMAL CS_DECIMAL_FLOAT,
	 "MEM_FREE" DECIMAL CS_DECIMAL_FLOAT,
	 "CPU_UTILIZATION" DECIMAL(34,	2) CS_FIXED,
	 "CHECK_TIME" TIMESTAMP DEFAULT CURRENT_TIMESTAMP ,
	 PRIMARY KEY ("CHECK_ID", "SERVER_ID")) UNLOAD PRIORITY 5 AUTO MERGE;

DROP TABLE "HANA_OS_MONITOR"."EMPLOYEE_INFO";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."EMPLOYEE_INFO" ("EMPLOYEE_ID" VARCHAR(10) NOT NULL ,
	 "EMPLOYEE_NAME" VARCHAR(50) NOT NULL ,
	 "EMAIL" VARCHAR(100) NOT NULL ,
	 "ADMIN" VARCHAR(1),
	 "SUPER_ADMIN" VARCHAR(1),
	 PRIMARY KEY ("EMPLOYEE_ID")) UNLOAD PRIORITY 5 AUTO MERGE ;

DROP TABLE "HANA_OS_MONITOR"."LOCATION_INFO";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."LOCATION_INFO" ("LOCATION_ID" INTEGER CS_INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	 "LOCATION" VARCHAR(25) NOT NULL ,
	 PRIMARY KEY ("LOCATION_ID")) UNLOAD PRIORITY 5 AUTO MERGE ;
CREATE UNIQUE INDEX "IDX_LOCATION" ON "HANA_OS_MONITOR"."LOCATION_INFO" ( "LOCATION" ASC )
;

DROP TABLE "HANA_OS_MONITOR"."EMPLOYEE_LOCATION_INFO";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."EMPLOYEE_LOCATION_INFO" ("EMPLOYEE_ID" VARCHAR(10) NOT NULL ,
	 "LOCATION_ID" INTEGER CS_INT,
	 --"ADMIN" VARCHAR(1),
	 PRIMARY KEY INVERTED VALUE ("EMPLOYEE_ID",
	 "LOCATION_ID")) UNLOAD PRIORITY 5 AUTO MERGE
;
ALTER TABLE "HANA_OS_MONITOR"."EMPLOYEE_LOCATION_INFO" ADD CONSTRAINT "FK1" FOREIGN KEY ( "EMPLOYEE_ID" ) REFERENCES "HANA_OS_MONITOR"."EMPLOYEE_INFO" ("EMPLOYEE_ID") ON UPDATE RESTRICT ON DELETE RESTRICT
;
ALTER TABLE "HANA_OS_MONITOR"."EMPLOYEE_LOCATION_INFO" ADD CONSTRAINT "FK2" FOREIGN KEY ( "LOCATION_ID" ) REFERENCES "HANA_OS_MONITOR"."LOCATION_INFO" ("LOCATION_ID") ON UPDATE RESTRICT ON DELETE RESTRICT
;

DROP TABLE "HANA_OS_MONITOR"."SERVER_INFO";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."SERVER_INFO" ("SERVER_ID" INTEGER CS_INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL ,
	 "SERVER_NAME" VARCHAR(25) NOT NULL ,
	 "SERVER_FULL_NAME" VARCHAR(100) NOT NULL ,
	 "DISK_TOTAL" DECIMAL CS_DECIMAL_FLOAT,
	 "MEM_TOTAL" DECIMAL CS_DECIMAL_FLOAT,
	 "CPU_NUMBER" INTEGER CS_INT,
	 "MOUNT_POINT" VARCHAR(100) NOT NULL,
	 "SUDO_PWD_FLAG" VARCHAR(1),
	 "OS" VARCHAR(100),
	 "KERNEL" VARCHAR(100),
	 "LOCATION_ID" INTEGER CS_INT,
	 PRIMARY KEY ("SERVER_ID")) UNLOAD PRIORITY 5 AUTO MERGE;

DROP TABLE "HANA_OS_MONITOR"."SID_MAPPING_CFG";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."SID_MAPPING_CFG" ("MAPPING_ID" INTEGER CS_INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL ,
	 "SID_START" VARCHAR(3) NOT NULL ,
	 "SID_END" VARCHAR(3) NOT NULL ,
	 "EMPLOYEE_ID" VARCHAR(25) NOT NULL ,
	 --"LOCATION_ID" INTEGER CS_INT NOT NULL,exists in EMPLOYEE_LOCATION_INFO
	 "COMMENT" VARCHAR(200),
	 PRIMARY KEY ("MAPPING_ID")) UNLOAD PRIORITY 5 AUTO MERGE;
ALTER TABLE "HANA_OS_MONITOR"."SID_MAPPING_CFG" ADD CONSTRAINT FK3 FOREIGN KEY(EMPLOYEE_ID) REFERENCES "HANA_OS_MONITOR"."EMPLOYEE_INFO"(EMPLOYEE_ID);

DROP TABLE "HANA_OS_MONITOR"."SID_INFO";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."SID_INFO" ("SERVER_ID" INTEGER CS_INT NOT NULL ,
	 "SID" VARCHAR(25) NOT NULL ,
	 "SID_USER" VARCHAR(25) NOT NULL,
	 "EMPLOYEE_ID" VARCHAR(25) NOT NULL ,
	 "FILTER_FLAG" VARCHAR(1),
	 "COMMENT" VARCHAR(200),
	 PRIMARY KEY ("SERVER_ID", "SID")) UNLOAD PRIORITY 5 AUTO MERGE;

DROP TABLE "HANA_OS_MONITOR"."M_MONITOR_CATALOG";
CREATE COLUMN TABLE "HANA_OS_MONITOR"."M_MONITOR_CATALOG" ("CHECK_ID" VARCHAR(20) NOT NULL,
	 "STAGE" INTEGER CS_INT NOT NULL,
	 "SERVER_ID" INTEGER CS_INT NOT NULL,
	 "LOCATION_ID" INTEGER CS_INT NOT NULL,
	 "START_TIME" TIMESTAMP DEFAULT CURRENT_TIMESTAMP ,
	 "END_TIME" TIMESTAMP,
	 "STATUS" VARCHAR(20),
	 "MESSAGE" VARCHAR(512),
	 PRIMARY KEY ("CHECK_ID","STAGE", "SERVER_ID", "LOCATION_ID")) UNLOAD PRIORITY 5 AUTO MERGE;


--CREATE VIEW
DROP VIEW "HANA_OS_MONITOR"."M_CURRENT_SERVERS_INFO";
CREATE VIEW "HANA_OS_MONITOR"."M_CURRENT_SERVERS_INFO" ("LOCATION_ID",
     "LOCATION",
	 "SERVER_ID",
	 "SERVER_NAME",
	 "SERVER_FULL_NAME",
	 "DISK_TOTAL",
	 "DISK_FREE",
	 "MEM_TOTAL",
	 "MEM_FREE",
	 "CPU_UTILIZATION",
	 "OS",
	 "CHECK_TIME",
	 "CHECK_ID" ) AS select
	 B.LOCATION_ID,
	 D.LOCATION,
	 A.SERVER_ID,
	 B.SERVER_NAME,
	 B.SERVER_FULL_NAME,
	 A.DISK_TOTAL,
	 A.DISK_FREE,
	 A.MEM_TOTAL,
	 A.MEM_FREE,
	 A.CPU_UTILIZATION,
	 B.OS,
	 A.CHECK_TIME,
	 A.CHECK_ID
from HANA_OS_MONITOR.M_SERVER_INFO A
INNER JOIN HANA_OS_MONITOR.SERVER_INFO B ON A.SERVER_ID = B.SERVER_ID
INNER JOIN (select max(CHECK_ID) CHECK_ID, LOCATION_ID from HANA_OS_MONITOR.M_MONITOR_CATALOG where stage = -1 and status IN ('COMPLETE', 'ERROR', 'WARNING') group by LOCATION_ID) C on A.CHECK_ID = C.CHECK_ID AND B.LOCATION_ID = C.LOCATION_ID
INNER JOIN HANA_OS_MONITOR.LOCATION_INFO D ON B.LOCATION_ID = D.LOCATION_ID WITH READ ONLY;

DROP VIEW "HANA_OS_MONITOR"."M_TOP5_MEM_CONSUMERS";
CREATE VIEW "HANA_OS_MONITOR"."M_TOP5_MEM_CONSUMERS" (
	 "SERVER_ID",
	 "SERVER_FULL_NAME",
	 "USER_NAME",
	 "EMPLOYEE_NAME",
	 "EMAIL",
	 "USAGE",
	 "USAGE_GB",
	 "CHECK_ID",
	 "RANK") AS SELECT
	 SERVER_ID,
	 SERVER_FULL_NAME,
	 USER_NAME,
	 EMPLOYEE_NAME,
	 EMAIL,
	 MEM_PERCENTAGE_SUM,
	 ROUND(MEM_PERCENTAGE_SUM * MEM_TOTAL / 1024 / 1024/ 100, 2),
	 CHECK_ID,
	 RANK
FROM(
        SELECT *, ROW_NUMBER() over (partition by CHECK_ID, SERVER_ID order by MEM_PERCENTAGE_SUM desc) AS RANK from
            (
                SELECT A.SERVER_ID , B.SERVER_FULL_NAME, A.USER_NAME, D.EMPLOYEE_NAME, D.EMAIL, B.MEM_TOTAL, SUM(A.MEM) MEM_PERCENTAGE_SUM, A.CHECK_ID
                FROM HANA_OS_MONITOR.M_MEM_INFO A
                INNER JOIN HANA_OS_MONITOR.M_CURRENT_SERVERS_INFO B ON A.CHECK_ID = B.CHECK_ID AND A.SERVER_ID = B.SERVER_ID
                LEFT JOIN HANA_OS_MONITOR.SID_INFO C ON A.SERVER_ID = C.SERVER_ID AND A.USER_NAME = C.SID_USER
                LEFT JOIN HANA_OS_MONITOR.EMPLOYEE_INFO D ON C.EMPLOYEE_ID = D.EMPLOYEE_ID
                GROUP BY A.SERVER_ID, B.SERVER_FULL_NAME, A.USER_NAME, D.EMPLOYEE_NAME, D.EMAIL, B.MEM_TOTAL, A.CHECK_ID ORDER BY SERVER_ID ASC, MEM_PERCENTAGE_SUM DESC
            )
    )WHERE RANK <= 5 AND MEM_PERCENTAGE_SUM > 0 ORDER BY SERVER_ID, RANK WITH READ ONLY;
DROP VIEW "HANA_OS_MONITOR"."M_TOP5_DISK_CONSUMERS";
CREATE VIEW "HANA_OS_MONITOR"."M_TOP5_DISK_CONSUMERS" ( "SERVER_ID",
	"SERVER_FULL_NAME",
	"USER_NAME",
	"FOLDER",
	"EMPLOYEE_NAME",
	"EMAIL",
	"USAGE",
	"CHECK_ID",
	"RANK" ) AS
SELECT
	SERVER_ID,
	SERVER_FULL_NAME,
	USER_NAME,
	FOLDER,
	EMPLOYEE_NAME,
	EMAIL,
	DISK_USAGE_GB,
	CHECK_ID,
	RANK
FROM(
	SELECT
		 *, ROW_NUMBER() over (partition by CHECK_ID, SERVER_ID order by DISK_USAGE_GB desc) AS RANK
	FROM (
		SELECT
			 A.SERVER_ID ,
			 B.SERVER_FULL_NAME,
			 A.FOLDER,
			 A.USER_NAME,
			 D.EMPLOYEE_NAME,
			 D.EMAIL,
			 ROUND(A.DISK_USAGE_KB / 1024 / 1024, 2) AS DISK_USAGE_GB,
			 A.CHECK_ID
		FROM HANA_OS_MONITOR.M_DISK_INFO A
		INNER JOIN HANA_OS_MONITOR.M_CURRENT_SERVERS_INFO B ON A.CHECK_ID = B.CHECK_ID AND A.SERVER_ID = B.SERVER_ID
		LEFT JOIN HANA_OS_MONITOR.SID_INFO C ON A.SERVER_ID = C.SERVER_ID AND A.FOLDER = C.SID
		LEFT JOIN HANA_OS_MONITOR.EMPLOYEE_INFO D ON C.EMPLOYEE_ID = D.EMPLOYEE_ID
		)
	) WHERE RANK <= 5 AND DISK_USAGE_GB > 0 ORDER BY SERVER_ID, RANK WITH READ ONLY;

DROP VIEW "HANA_OS_MONITOR"."M_TOP5_CPU_CONSUMERS";
CREATE VIEW "HANA_OS_MONITOR"."M_TOP5_CPU_CONSUMERS" (
	 "SERVER_ID",
	 "SERVER_FULL_NAME",
	 "USER_NAME",
	 "EMPLOYEE_NAME",
	 "EMAIL",
	 "USAGE",
	 "CHECK_ID",
	 "RANK") AS SELECT
	 SERVER_ID,
	 SERVER_FULL_NAME,
	 USER_NAME,
	 EMPLOYEE_NAME,
	 EMAIL,
	 ROUND(CPU_PERCENTAGE_SUM,2),
	 CHECK_ID,
	 RANK
FROM(
        SELECT *, ROW_NUMBER() over (partition by CHECK_ID, SERVER_ID order by CPU_PERCENTAGE_SUM desc) AS RANK from
            (
                SELECT A.SERVER_ID , B.SERVER_FULL_NAME, A.USER_NAME, D.EMPLOYEE_NAME, D.EMAIL, SUM(A.CPU/E.CPU_NUMBER) CPU_PERCENTAGE_SUM, A.CHECK_ID
                FROM HANA_OS_MONITOR.M_CPU_INFO A
                INNER JOIN HANA_OS_MONITOR.M_CURRENT_SERVERS_INFO B ON A.CHECK_ID = B.CHECK_ID AND A.SERVER_ID = B.SERVER_ID
                LEFT JOIN HANA_OS_MONITOR.SID_INFO C ON A.SERVER_ID = C.SERVER_ID AND A.USER_NAME = C.SID_USER
                LEFT JOIN HANA_OS_MONITOR.EMPLOYEE_INFO D ON C.EMPLOYEE_ID = D.EMPLOYEE_ID
                INNER JOIN HANA_OS_MONITOR.SERVER_INFO E ON A.SERVER_ID = E.SERVER_ID
                GROUP BY A.SERVER_ID, B.SERVER_FULL_NAME, A.USER_NAME, D.EMPLOYEE_NAME, D.EMAIL, A.CHECK_ID ORDER BY SERVER_ID ASC, CPU_PERCENTAGE_SUM DESC
            )
    )WHERE RANK <= 5 AND CPU_PERCENTAGE_SUM > 0 ORDER BY SERVER_ID, RANK WITH READ ONLY;
DROP VIEW "HANA_OS_MONITOR"."M_LAST3_SERVERS_INFO";
CREATE VIEW "HANA_OS_MONITOR"."M_LAST3_SERVERS_INFO" (
	 "SERVER_ID",
	 "SERVER_FULL_NAME",
	 "CHECK_ID",
	 "DISK_TOTAL",
	 "DISK_FREE",
	 "MEM_TOTAL",
	 "MEM_FREE",
	 "CPU_UTILIZATION",
	 "CHECK_TIME" ) AS SELECT B.SERVER_ID,
	 B.SERVER_FULL_NAME,
	 A.CHECK_ID,
	 A.DISK_TOTAL,
	 A.DISK_FREE,
	 A.MEM_TOTAL,
	 A.MEM_FREE,
	 A.CPU_UTILIZATION,
	 A.CHECK_TIME
FROM HANA_OS_MONITOR.M_SERVER_INFO A
INNER JOIN HANA_OS_MONITOR.SERVER_INFO B ON A.SERVER_ID = B.SERVER_ID
INNER JOIN (
	SELECT LOCATION_ID, CHECK_ID FROM (
		SELECT S.LOCATION_ID, M.CHECK_ID, ROW_NUMBER() OVER (PARTITION BY LOCATION_ID ORDER BY CHECK_ID DESC) AS RANK
		FROM HANA_OS_MONITOR.M_SERVER_INFO M
		INNER JOIN HANA_OS_MONITOR.SERVER_INFO S ON M.SERVER_ID = S.SERVER_ID
		GROUP BY S.LOCATION_ID, M.CHECK_ID) WHERE RANK <= 3) C ON A.CHECK_ID = C.CHECK_ID AND B.LOCATION_ID = C.LOCATION_ID
ORDER BY A.SERVER_ID ASC, A.CHECK_ID DESC  WITH READ ONLY;

DROP VIEW "HANA_OS_MONITOR"."M_RESOURCE_HISTORY";
CREATE VIEW "HANA_OS_MONITOR"."M_RESOURCE_HISTORY" (
		 "SERVER_ID",
		 "SERVER_FULL_NAME",
		 "DISK_USAGE",
		 "MEM_USAGE",
		 "CPU_USAGE",
		 "CHECK_ID") AS
	SELECT
		 A."SERVER_ID",
		 B."SERVER_FULL_NAME",
		 ROUND((A."DISK_TOTAL"-A."DISK_FREE")/A."DISK_TOTAL" * 100, 2) AS "DISK_USAGE",
		 ROUND((A."MEM_TOTAL"-A."MEM_FREE")/A."MEM_TOTAL" * 100, 2) AS "MEM_USAGE",
		 A."CPU_UTILIZATION" AS "CPU_USAGE",
	 	 A."CHECK_ID"
	FROM "HANA_OS_MONITOR"."M_SERVER_INFO" A
	INNER JOIN	"HANA_OS_MONITOR"."SERVER_INFO" B	ON A."SERVER_ID" = B."SERVER_ID"
	WHERE ADD_DAYS(A.CHECK_TIME, 14) >= CURRENT_TIMESTAMP
	ORDER BY A.CHECK_TIME;

DROP VIEW "HANA_OS_MONITOR"."M_CURRENT_VERSION_INFO";
CREATE VIEW "HANA_OS_MONITOR"."M_CURRENT_VERSION_INFO" ( "SERVER_ID",
	 "SERVER_NAME",
	 "SERVER_FULL_NAME",
	 "SID",
	 "INSTANCE_NUM",
	 "EMPLOYEE_NAME",
	 "REVISION",
	 "RELEASE_SP",
	 "OS",
	 "LOCATION_ID",
	 "CHECK_TIME",
	 "CHECK_ID" ) AS SELECT
	 A.SERVER_ID,
	 B.SERVER_NAME,
	 B.SERVER_FULL_NAME,
	 A.SID,
	 INSTANCE_NUM,
	 D.EMPLOYEE_NAME,
	 A.REVISION,
	 A.RELEASE_SP,
	 B.OS,
	 B.LOCATION_ID,
	 A.CHECK_TIME,
	 A.CHECK_ID
FROM HANA_OS_MONITOR.M_VERSION_INFO A
INNER JOIN HANA_OS_MONITOR.SERVER_INFO B ON A.SERVER_ID = B.SERVER_ID
INNER JOIN (SELECT
	 MAX(CHECK_ID) CHECK_ID,
	 SERVER_ID
	from HANA_OS_MONITOR.M_VERSION_INFO
	GROUP BY SERVER_ID) E ON A.CHECK_ID = E.CHECK_ID
AND A.SERVER_ID = E.SERVER_ID
LEFT JOIN HANA_OS_MONITOR.SID_INFO C ON A.SERVER_ID = C.SERVER_ID
AND A.SID = C.SID
LEFT JOIN HANA_OS_MONITOR.EMPLOYEE_INFO D ON C.EMPLOYEE_ID = D.EMPLOYEE_ID WITH READ ONLY;

DROP VIEW "HANA_OS_MONITOR"."M_ALL_CPU_CONSUMERS";
CREATE VIEW "HANA_OS_MONITOR"."M_ALL_CPU_CONSUMERS" ( "SERVER_ID",
	 "SERVER_FULL_NAME",
	 "USER_NAME",
	 "EMPLOYEE_NAME",
	 "EMAIL",
	 "USAGE",
	 "CHECK_ID",
	 "RANK" ) AS SELECT
	 SERVER_ID,
	 SERVER_FULL_NAME,
	 USER_NAME,
	 EMPLOYEE_NAME,
	 EMAIL,
	 ROUND(CPU_PERCENTAGE_SUM,
	 2),
	 CHECK_ID,
	 RANK
FROM( SELECT
	 *,
	 ROW_NUMBER() over (partition by CHECK_ID,
	 SERVER_ID
		order by CPU_PERCENTAGE_SUM desc) AS RANK
	from ( SELECT
	 A.SERVER_ID ,
	 B.SERVER_FULL_NAME,
	 A.USER_NAME,
	 D.EMPLOYEE_NAME,
	 D.EMAIL,
	 SUM(A.CPU/E.CPU_NUMBER) CPU_PERCENTAGE_SUM,
	 A.CHECK_ID
		FROM HANA_OS_MONITOR.M_CPU_INFO A
		INNER JOIN HANA_OS_MONITOR.M_CURRENT_SERVERS_INFO B ON A.CHECK_ID = B.CHECK_ID
		AND A.SERVER_ID = B.SERVER_ID
		LEFT JOIN HANA_OS_MONITOR.SID_INFO C ON A.SERVER_ID = C.SERVER_ID
		AND A.USER_NAME = C.SID_USER
		LEFT JOIN HANA_OS_MONITOR.EMPLOYEE_INFO D ON C.EMPLOYEE_ID = D.EMPLOYEE_ID
		INNER JOIN HANA_OS_MONITOR.SERVER_INFO E ON A.SERVER_ID = E.SERVER_ID
		GROUP BY A.SERVER_ID,
	 B.SERVER_FULL_NAME,
	 A.USER_NAME,
	 D.EMPLOYEE_NAME,
	 D.EMAIL,
	 A.CHECK_ID
		ORDER BY SERVER_ID ASC,
	 CPU_PERCENTAGE_SUM DESC ) )
WHERE CPU_PERCENTAGE_SUM > 0
ORDER BY SERVER_ID,
	 RANK WITH READ ONLY;

DROP VIEW "HANA_OS_MONITOR"."M_ALL_DISK_CONSUMERS";
CREATE VIEW "HANA_OS_MONITOR"."M_ALL_DISK_CONSUMERS" ( "SERVER_ID",
	 "SERVER_FULL_NAME",
	 "USER_NAME",
	 "FOLDER",
	 "EMPLOYEE_NAME",
	 "EMAIL",
	 "USAGE",
	 "CHECK_ID",
	 "RANK" ) AS SELECT
	 SERVER_ID,
	 SERVER_FULL_NAME,
	 USER_NAME,
	 FOLDER,
	 EMPLOYEE_NAME,
	 EMAIL,
	 DISK_USAGE_GB,
	 CHECK_ID,
	 RANK
FROM( SELECT
	 *,
	 ROW_NUMBER() over (partition by CHECK_ID,
	 SERVER_ID
		order by DISK_USAGE_GB desc) AS RANK
	FROM ( SELECT
	 A.SERVER_ID ,
	 B.SERVER_FULL_NAME,
	 A.FOLDER,
	 A.USER_NAME,
	 D.EMPLOYEE_NAME,
	 D.EMAIL,
	 ROUND(A.DISK_USAGE_KB / 1024 / 1024,
	 2) AS DISK_USAGE_GB,
	 A.CHECK_ID
		FROM HANA_OS_MONITOR.M_DISK_INFO A
		INNER JOIN HANA_OS_MONITOR.M_CURRENT_SERVERS_INFO B ON A.CHECK_ID = B.CHECK_ID
		AND A.SERVER_ID = B.SERVER_ID
		LEFT JOIN HANA_OS_MONITOR.SID_INFO C ON A.SERVER_ID = C.SERVER_ID
		AND A.FOLDER = C.SID
		LEFT JOIN HANA_OS_MONITOR.EMPLOYEE_INFO D ON C.EMPLOYEE_ID = D.EMPLOYEE_ID ) )
WHERE DISK_USAGE_GB > 0
ORDER BY SERVER_ID,
	 RANK WITH READ ONLY;

DROP VIEW "HANA_OS_MONITOR"."M_ALL_MEM_CONSUMERS";
CREATE VIEW "HANA_OS_MONITOR"."M_ALL_MEM_CONSUMERS" ( "SERVER_ID",
	 "SERVER_FULL_NAME",
	 "USER_NAME",
	 "EMPLOYEE_NAME",
	 "EMAIL",
	 "USAGE",
	 "USAGE_GB",
	 "CHECK_ID",
	 "RANK" ) AS SELECT
	 SERVER_ID,
	 SERVER_FULL_NAME,
	 USER_NAME,
	 EMPLOYEE_NAME,
	 EMAIL,
	 MEM_PERCENTAGE_SUM,
	 ROUND(MEM_PERCENTAGE_SUM * MEM_TOTAL / 1024 / 1024/ 100,
	 2),
	 CHECK_ID,
	 RANK
FROM( SELECT
	 *,
	 ROW_NUMBER() over (partition by CHECK_ID,
	 SERVER_ID
		order by MEM_PERCENTAGE_SUM desc) AS RANK
	from ( SELECT
	 A.SERVER_ID ,
	 B.SERVER_FULL_NAME,
	 A.USER_NAME,
	 D.EMPLOYEE_NAME,
	 D.EMAIL,
	 B.MEM_TOTAL,
	 SUM(A.MEM) MEM_PERCENTAGE_SUM,
	 A.CHECK_ID
		FROM HANA_OS_MONITOR.M_MEM_INFO A
		INNER JOIN HANA_OS_MONITOR.M_CURRENT_SERVERS_INFO B ON A.CHECK_ID = B.CHECK_ID
		AND A.SERVER_ID = B.SERVER_ID
		LEFT JOIN HANA_OS_MONITOR.SID_INFO C ON A.SERVER_ID = C.SERVER_ID
		AND A.USER_NAME = C.SID_USER
		LEFT JOIN HANA_OS_MONITOR.EMPLOYEE_INFO D ON C.EMPLOYEE_ID = D.EMPLOYEE_ID
		GROUP BY A.SERVER_ID,
	 B.SERVER_FULL_NAME,
	 A.USER_NAME,
	 D.EMPLOYEE_NAME,
	 D.EMAIL,
	 B.MEM_TOTAL,
	 A.CHECK_ID
		ORDER BY SERVER_ID ASC,
	 MEM_PERCENTAGE_SUM DESC ) )
WHERE MEM_PERCENTAGE_SUM > 0
ORDER BY SERVER_ID,
	 RANK WITH READ ONLY;

DROP VIEW "HANA_OS_MONITOR"."M_SID_DETAIL_INFO";
CREATE VIEW "HANA_OS_MONITOR"."M_SID_DETAIL_INFO" ( "SERVER_ID",
	 "SERVER_NAME",
	 "SID",
	 "INSTANCE_NUM",
	 "EMPLOYEE_NAME",
	 "REVISION",
	 "RELEASE_SP",
	 "MEM_USAGE_GB",
	 "MEM_USAGE_RANK",
	 "DISK_USAGE_GB",
	 "DISK_USAGE_RANK",
	 "CPU_USAGE_PCT",
	 "CPU_USAGE_RANK",
	 "OS",
	 "LOCATION_ID",
	 "CHECK_TIME",
	 "CHECK_ID" ) AS SELECT
	 A.SERVER_ID,
	 A.SERVER_NAME,
	 A.SID,
	 INSTANCE_NUM,
	 A.EMPLOYEE_NAME,
	 A.REVISION,
	 A.RELEASE_SP,
	 B.MEM_USAGE_GB,
	 B.MEM_USAGE_RANK,
	 C.DISK_USAGE_GB,
	 C.DISK_USAGE_RANK,
	 D.CPU_USAGE_PCT,
	 D.CPU_USAGE_RANK,
	 A.OS,
	 A.LOCATION_ID,
	 A.CHECK_TIME,
	 A.CHECK_ID
FROM HANA_OS_MONITOR.M_CURRENT_VERSION_INFO A
LEFT JOIN (SELECT
	 SERVER_ID,
	 USAGE_GB AS MEM_USAGE_GB,
	 RANK AS MEM_USAGE_RANK,
	 UPPER(
		LEFT(USER_NAME,
	 3)) AS SID
	FROM HANA_OS_MONITOR.M_ALL_MEM_CONSUMERS) B ON A.SID = B.SID
AND A.SERVER_ID = B.SERVER_ID
LEFT JOIN (SELECT
	 SERVER_ID,
	 USAGE AS DISK_USAGE_GB,
	 RANK AS DISK_USAGE_RANK,
	 UPPER(
		LEFT(USER_NAME,
	 3)) AS SID
	FROM HANA_OS_MONITOR.M_ALL_DISK_CONSUMERS) C ON A.SID = C.SID
AND A.SERVER_ID = C.SERVER_ID
LEFT JOIN (SELECT
	 SERVER_ID,
	 USAGE AS CPU_USAGE_PCT,
	 RANK AS CPU_USAGE_RANK,
	 UPPER(
		LEFT(USER_NAME,
	 3)) AS SID
	FROM HANA_OS_MONITOR.M_ALL_CPU_CONSUMERS) D ON A.SID = D.SID
AND A.SERVER_ID = D.SERVER_ID WITH READ ONLY;